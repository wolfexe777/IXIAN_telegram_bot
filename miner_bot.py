import requests
import schedule
import time
import pickle
from telegram import ReplyKeyboardMarkup, KeyboardButton, ParseMode

header_called = False

# –ü–µ—Ä–µ–º–µ–Ω–Ω–∞—è –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –∞–¥—Ä–µ—Å–∞ –∫–æ—à–µ–ª—å–∫–∞
pool_address = None


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∞–¥—Ä–µ—Å–∞
def save_pool_address():
    with open("pool_address.pickle", "wb") as file:
        pickle.dump(pool_address, file)

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –∞–¥—Ä–µ—Å–∞
def load_pool_address():
    global pool_address
    try:
        with open("pool_address.pickle", "rb") as file:
            pool_address = pickle.load(file)
    except FileNotFoundError:
        pass

# –ó–∞–≥—Ä—É–∑–∫–∞ –∞–¥—Ä–µ—Å–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –ø—Ä–æ–≥—Ä–∞–º–º—ã
load_pool_address()

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –æ –º–∞–π–Ω–∏–Ω–≥–µ —Å –ø—É–ª–∞
def get_mining_data():
    if pool_address:
        url = f"http://vmi761386.contaboserver.net/api/miner/{pool_address}/workers"
        response = requests.get(url)
        if response.ok:
            data = response.json()
            return data
        else:
            print(f"Error: {response.status_code} - {response.text}")
    return None

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –≤—ã–ø–ª–∞—Ç —Å –ø—É–ª–∞
def get_payment_statistics():
    if pool_address:
        url = f"http://vmi761386.contaboserver.net/api/miner/{pool_address}/payments"
        response = requests.get(url)
        if response.ok:
            data = response.json()
            return data
        else:
            print(f"Error: {response.status_code} - {response.text}")
    return None

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –æ —Ñ–µ—Ä–º–µ
def format_farm_data(farm):
    global header_called
    if not header_called:
        header_called = True
        header = "<code>\n‚öôÔ∏è –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ä–∞–±–æ—Ç—ã —Ä–∏–≥–æ–≤:</code>\n\n"
    else:
        header = ""
    name = farm["Name"]
    hashrate = round(float(farm["Hashrate"]))
    last_seen = farm["LastSeen"]
    return f"<b>{header}<code>–§–µ—Ä–º–∞:</code>{name}\n<code>–•—ç—à—Ä–µ–π—Ç:</code>{hashrate} KH/s\n<code>–í—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–π —à–∞—Ä—ã:</code>{last_seen}\n</b>"

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –≤—ã–ø–ª–∞—Ç
def format_payment_statistics(statistics, limit=None):
    response = "\n<code>üí∏ –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –≤—ã–ø–ª–∞—Ç –º–æ–Ω–µ—Ç Ixian –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 24 —á–∞—Å–∞:</code>\n\n"
    total_sum = 0
    if limit is not None:
        statistics = statistics[:limit]
    for payment in statistics:
        timestamp = payment["TimeStamp"]
        value = round(float(payment["Value"]))
        response += f"<code>–í—Ä–µ–º—è:</code> {timestamp}\n"
        response += f"<code>–°—É–º–º–∞:</code>{value} Ixian\n"
        response += "---------------------------------------------\n"
        total_sum += round(value)
    response += f"<code>–û–±—â–∞—è —Å—É–º–º–∞ –≤—ã–ø–ª–∞—Ç:</code> {total_sum} Ixian\n"
    return response

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ç–∞—Ç—É—Å–∞ —Ñ–µ—Ä–º—ã –∏ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ Telegram-–±–æ—Ç–∞
def check_farm_status(context):
    mining_data = get_mining_data()
    offline_farms = []

    # –û—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏ –ø–æ—Å–ª–µ–¥–Ω–µ–π —à–∞—Ä—ã, –±–æ–ª—å—à–µ 2 –º–∏–Ω—É—Ç –Ω–µ—Ç —à–∞—Ä –æ—Ç–ø—Ä–∞–≤–∫–∞ –≤ –±–æ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
    if mining_data:
        for farm in mining_data:
            last_seen = farm["LastSeen"]
            if "minutes" in last_seen:
                minutes_ago = int(last_seen.split(" ")[0])
                if minutes_ago > 2:
                    offline_farms.append(farm)

        if len(offline_farms) > 0:
            response = "<code>üî¥ –§–µ—Ä–º—ã OFFLINE:</code>\n"
            for farm in offline_farms:
                response += format_farm_data(farm) + "\n"
            context.bot.send_message(chat_id="774390944", text=response)

    # –û—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ —Ö—ç—à—Ä–µ–π—Ç–æ–≤, –µ—Å–ª–∏ "0" –æ—Ç–ø—Ä–∞–≤–∫–∞ –≤ –±–æ—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
    for farm in mining_data:
        worker_name = farm["Name"]
        current_hashrate = round(float(farm["Hashrate"]))
        if current_hashrate == 0:
            message = f"<code>üî¥ –í–Ω–∏–º–∞–Ω–∏–µ: –§–µ—Ä–º–∞ '{worker_name}' –æ—Å—Ç–∞–Ω–æ–≤–∏–ª–∞—Å—å.</code>"
            context.bot.send_message(chat_id="774390944", text=message)

    # –û—Ç–ø—Ä–∞–≤–∫–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –≤—ã–ø–ª–∞—Ç
    if get_payment_statistics():
        response = format_payment_statistics(get_payment_statistics())
        context.bot.send_message(chat_id="774390944", text=response, parse_mode="HTML")


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–æ–º–∞–Ω–¥—ã /start
def start(update, context):
    global pool_address
    chat_id = update.message.chat_id
    mining_data = get_mining_data()

    # –°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö –ø–æ –∏–º–µ–Ω–∏ –≤ –∞–ª—Ñ–∞–≤–∏—Ç–Ω–æ–º –ø–æ—Ä—è–¥–∫–µ
    if mining_data:
        sorted_data = sorted(mining_data, key=lambda farm: farm["Name"])
    else:
        sorted_data = []

    total_hashrate = 0
    total_workers = 0
    response = ""

    for farm in sorted_data:
        response += format_farm_data(farm) + "\n"
        hashrate = round(float(farm["Hashrate"]))
        total_hashrate += hashrate
        total_workers += 1

    response += f"\n<code>–û–±—â–∏–π —Ö–µ—à—Ä–µ–π—Ç:</code> {total_hashrate} kH/s"
    response += f"\n<code>–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ñ–µ—Ä–º –≤ —Ä–∞–±–æ—Ç–µ:</code> {total_workers}"

    # –°–æ–∑–¥–∞–Ω–∏–µ –∫–Ω–æ–ø–æ–∫
    button_start = KeyboardButton('‚õè –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ä–∞–±–æ—Ç—ã —Ñ–µ—Ä–º')
    button_add_address = KeyboardButton('üìó –î–æ–±–∞–≤–∏—Ç—å –∞–¥—Ä–µ—Å')
    button_remove_address = KeyboardButton('üìï –£–¥–∞–ª–∏—Ç—å –∞–¥—Ä–µ—Å')
    button_view_addresses = KeyboardButton('üìñ –¢–µ–∫—É—â–∏–π –∞–¥—Ä–µ—Å')
    button_view_payments = KeyboardButton('üí∏ –ü—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å –≤—ã–ø–ª–∞—Ç—ã')


    # –°–æ–∑–¥–∞–Ω–∏–µ —Ä–∞–∑–º–µ—Ç–∫–∏ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –æ—Ç–≤–µ—Ç–∞
    reply_markup = ReplyKeyboardMarkup(
        [[button_start, button_view_payments],[button_add_address, button_remove_address,button_view_addresses]],
        resize_keyboard=True
    )

    context.bot.send_message(chat_id=chat_id, text=response, reply_markup=reply_markup, parse_mode="HTML")

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –Ω–∞–∂–∞—Ç–∏—è –∫–Ω–æ–ø–∫–∏ "–î–æ–±–∞–≤–∏—Ç—å –∞–¥—Ä–µ—Å"
def add_address(update, context):
    global pool_address
    chat_id = update.message.chat_id
    message = "<code>üìó –ü–æ–∂–∞–ª—É–π—Å—Ç–∞,–≤–≤–µ–¥–∏—Ç–µ –∞–¥—Ä–µ—Å –∫–æ—à–µ–ª—å–∫–∞:</code>"
    context.bot.send_message(chat_id=chat_id, text=message, parse_mode="HTML")

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –Ω–∞–∂–∞—Ç–∏—è –∫–Ω–æ–ø–∫–∏ "–£–¥–∞–ª–∏—Ç—å –∞–¥—Ä–µ—Å"
def remove_address(update, context):
    global pool_address
    chat_id = update.message.chat_id
    pool_address = None
    save_pool_address()  # Save the updated pool address
    message = "<code>üìï –ê–¥—Ä–µ—Å –∫–æ—à–µ–ª—å–∫–∞ —É–¥–∞–ª–µ–Ω.</code>"
    context.bot.send_message(chat_id=chat_id, text=message, parse_mode="HTML")

 # –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω–æ–≥–æ –∞–¥—Ä–µ—Å–∞
def view_addresses(update, context):
    global pool_address
    chat_id = update.message.chat_id

    if pool_address:
        message = f"<code>üìñ –¢–µ–∫—É—â–∏–π —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–π –∞–¥—Ä–µ—Å:\n{pool_address}</code>"
    else:
        message = "<code>üî¥ –ù–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω–æ–≥–æ –∞–¥—Ä–µ—Å–∞.</code>"

    # –°–æ–∑–¥–∞–Ω–∏–µ –∫–Ω–æ–ø–æ–∫ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã—Ö –∞–¥—Ä–µ—Å–æ–≤
    keyboard = []
    if pool_address:
        keyboard.append([pool_address])

    reply_markup = ReplyKeyboardMarkup(keyboard, one_time_keyboard=True)

    context.bot.send_message(chat_id=chat_id, text=message, reply_markup=reply_markup, parse_mode="HTML")

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –≤—ã–ø–ª–∞—Ç
def view_payments(update, context):
    global pool_address
    chat_id = update.message.chat_id
    payment_statistics = get_payment_statistics()

    if payment_statistics:
        response = format_payment_statistics(payment_statistics, limit=24)  # Limit to 24 lines
        context.bot.send_message(chat_id=chat_id, text=response, parse_mode="HTML")
    else:
        message = "<code>üî¥ –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ –≤—ã–ø–ª–∞—Ç–∞—Ö.</code>"
        context.bot.send_message(chat_id=chat_id, text=message, parse_mode="HTML")

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤–≤–æ–¥–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∞–¥—Ä–µ—Å–∞ –∫–æ—à–µ–ª—å–∫–∞
def handle_address_input(update, context):
    global pool_address
    chat_id = update.message.chat_id
    address = update.message.text
    pool_address = address
    save_pool_address()  # Save the updated pool address
    message = f'<code>üìñ –í—ã–±—Ä–∞–Ω –∞–¥—Ä–µ—Å:\n{pool_address}</code>'
    context.bot.send_message(chat_id=chat_id, text=message, parse_mode="HTML")
    start(update, context)  # Call the start function after setting the pool address

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤—ã–±–æ—Ä–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω–æ–≥–æ –∞–¥—Ä–µ—Å–∞
def handle_select_address(update, context):
    chat_id = update.message.chat_id
    selected_option = int(update.message.text.split(".")[0].strip())

    global pool_address
    pool_address = address
    save_pool_address()

    message = f"<code>üìñ –ê–¥—Ä–µ—Å '{address}' —É—Å–ø–µ—à–Ω–æ –≤—ã–±—Ä–∞–Ω.</code>"
    context.bot.send_message(chat_id=chat_id, text=message, parse_mode="HTML")

    # –í—ã–∑–æ–≤ check_farm_status –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –º–∞–π–Ω–∏–Ω–≥–µ –∏ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π

    check_farm_status(context)

    start(update, context)


# –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞
def main():
    from telegram.ext import Updater, CommandHandler, MessageHandler, Filters

    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞ –∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –∫–æ–º–∞–Ω–¥
    updater = Updater("6156741689:AAG2oxo_PU9Xnw4ArkXnVa8ekRXN5YNOwRs", use_context=True)
    dp = updater.dispatcher
    dp.add_handler(CommandHandler("start", start))
    dp.add_handler(MessageHandler(Filters.regex('^‚õè –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ä–∞–±–æ—Ç—ã —Ñ–µ—Ä–º$'), start))
    dp.add_handler(MessageHandler(Filters.regex('^üìó –î–æ–±–∞–≤–∏—Ç—å –∞–¥—Ä–µ—Å$'), add_address))
    dp.add_handler(MessageHandler(Filters.regex('üìï –£–¥–∞–ª–∏—Ç—å –∞–¥—Ä–µ—Å$'), remove_address))
    dp.add_handler(MessageHandler(Filters.regex('^üìñ –¢–µ–∫—É—â–∏–π –∞–¥—Ä–µ—Å$'), view_addresses))
    dp.add_handler(MessageHandler(Filters.regex('^üí∏ –ü—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å –≤—ã–ø–ª–∞—Ç—ã$'), view_payments))
    dp.add_handler(MessageHandler(Filters.text & (~Filters.command), handle_address_input))
    dp.add_handler(MessageHandler(Filters.regex('^(. Address 1)$'), handle_select_address))

    # –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
    updater.start_polling()

    # –ó–∞–ø—É—Å–∫ –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–æ–π –∑–∞–¥–∞—á–∏ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ç–∞—Ç—É—Å–∞ —Ñ–µ—Ä–º
    schedule.every(15).seconds.do(check_farm_status, context=updater)

    # –ó–∞–ø—É—Å–∫ –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–æ–π –∑–∞–¥–∞—á–∏ –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ
    while True:
        schedule.run_pending()
        time.sleep(1)

if __name__ == '__main__':
    main()

# pip install python-telegram-bot==13.13
# pip install schedule
# pip install requests